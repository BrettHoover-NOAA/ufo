window begin: 2018-01-01T00:00:00Z
window end: 2019-01-01T00:00:00Z

observations:
# Test "inflate error" with a constant inflation factor
# and only second variable filtered
- obs space:
    name: test data
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2, variable3]
  HofX: HofX
  obs filters:
  - filter: BlackList
    filter variables:
    - name: variable2
    action:
      name: inflate error
      inflation factor: 2.0
  compareVariables:
  - test:
      name: variable1@EffectiveError
    reference:
      name: variable1@ObsError
  - test:
      name: variable2@EffectiveError
    reference:
      name: variable2_inflatederror_factor@TestReference
  - test:
      name: variable3@EffectiveError
    reference:
      name: variable3@ObsError

# Test "inflate error" with a constant inflation factor
# and all variables filtered
- obs space:
    name: test data
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2, variable3]
  HofX: HofX
  obs filters:
  - filter: BlackList
    action:
      name: inflate error
      inflation factor: 2.0
  compareVariables:
  - test:
      name: variable1@EffectiveError
    reference:
      name: variable1_inflatederror_factor@TestReference
  - test:
      name: variable2@EffectiveError
    reference:
      name: variable2_inflatederror_factor@TestReference
  - test:
      name: variable3@EffectiveError
    reference:
      name: variable3_inflatederror_factor@TestReference


# Test "inflate error" with an inflation variable (metadata)
# and only second variable filtered
- obs space:
    name: test data
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2, variable3]
  HofX: HofX
  obs filters:
  - filter: BlackList
    filter variables:
    - name: variable2
    action:
      name: inflate error
      inflation variable:
        name: var1@MetaData
  compareVariables:
  - test:
      name: variable1@EffectiveError
    reference:
      name: variable1@ObsError
  - test:
      name: variable2@EffectiveError
    reference:
      name: variable2_inflatederror_var@TestReference
  - test:
      name: variable3@EffectiveError
    reference:
      name: variable3@ObsError


# Test "inflate error" with an inflation variable (metadata)
# and all variables filtered
- obs space:
    name: test data
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2, variable3]
  HofX: HofX
  obs filters:
  - filter: BlackList
    action:
      name: inflate error
      inflation variable:
        name: var1@MetaData
  compareVariables:
  - test:
      name: variable1@EffectiveError
    reference:
      name: variable1_inflatederror_var@TestReference
  - test:
      name: variable2@EffectiveError
    reference:
      name: variable2_inflatederror_var@TestReference
  - test:
      name: variable3@EffectiveError
    reference:
      name: variable3_inflatederror_var@TestReference

# Test "accept"
- obs space:
    name: test data
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2]
  HofX: HofX
  obs filters:
  # reject observations with var1 >= 6
  - filter: BlackList
    action:
      name: reject
    where:
      - variable:
          name:  var1@MetaData  # = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
        minvalue: 6
  # now "accept back" all rejected observations of variable2 with var1 >= 3 and var1 <= 7
  - filter: AcceptList
    action:
      name: accept
    filter variables: [variable2]
    where:
      - variable:
          name:  var1@MetaData  # = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
        minvalue: 3
        maxvalue: 7
  # all observations of variable1 with var1 <= 5 and of variable2 with var1 <= 7 should be accepted
  passedBenchmark: 12

# Test "passivate"
- obs space:
    name: test data
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/filters_testdata.nc4
    simulated variables: [variable1, variable2]
  HofX: HofX
  obs filters:
  # passivate observations with var1 >= 5
  - filter: BlackList
    action:
      name: passivate
    where:
      - variable:
          name:  var1@MetaData  # = 1, 2, 3, 4, 5, 6, 7, 8, 9, 10
        minvalue: 5
  benchmarkFlag: 1      # passive
  flaggedBenchmark: 12  # expect 12 observations to be assigned the "passive" flag
  passedBenchmark: 8    # expect 8 observations to be assigned the "passed" flag

# Test "set"
- obs space:
    name: Test data for 'set'
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/variable_assignment_testdata.nc
    simulated variables: [air_temperature, relative_humidity]
  obs filters:
  # set the diagnostic flag FlagA for observations of all simulated variables taken at latitude >= 0
  - filter: Perform Action
    where:
    - variable:
        name: MetaData/latitude  # = -2.5, -1.25, 0, 1.25, 2.5
      minvalue: 0
    action:
      name: set
      flag: FlagA
  # set the diagnostic flag FlagA for observations of the relative humidity taken at latitude <= 0
  # (note: this shouldn't clear the flags set earlier)
  - filter: Perform Action
    filter variables:
    - name: relative_humidity
    where:
    - variable:
        name: MetaData/latitude  # = -2.5, -1.25, 0, 1.25, 2.5
      maxvalue: 0
    action:
      name: set
      flag: FlagA
  compareVariables:
  - test:
      name: DiagnosticFlags/FlagA/air_temperature
    reference:
      name: TestReference/bool_variable_00111  # = 0, 0, 1, 1, 1
  - test:
      name: DiagnosticFlags/FlagA/relative_humidity
    reference:
      name: TestReference/bool_variable_11111  # = 1, 1, 1, 1, 1

# Try to set a non-existing diagnostic flag
- obs space:
    name: Test data for 'set'
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/variable_assignment_testdata.nc
    simulated variables: [air_temperature, relative_humidity]
  obs filters:
  - filter: Perform Action
    action:
      name: set
      flag: NonexistingFlag
  expectExceptionWithMessage: Diagnostic flag 'NonexistingFlag' does not exist yet

# Test "unset"
- obs space:
    name: Test data for 'unset'
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/variable_assignment_testdata.nc
    simulated variables: [air_temperature, relative_humidity]
  obs filters:
  # set the diagnostic flag FlagA everywhere
  - filter: Perform Action
    action:
      name: set
      flag: FlagA
  # unset the diagnostic flag FlagA for observations of all simulated variables taken at latitude >= 0
  - filter: Perform Action
    where:
    - variable:
        name: MetaData/latitude  # = -2.5, -1.25, 0, 1.25, 2.5
      minvalue: 0
    action:
      name: unset
      flag: FlagA
  # unset the diagnostic flag FlagA for observations of the relative humidity taken at latitude <= 0
  # (note: this shouldn't change the flags of any other observations)
  - filter: Perform Action
    filter variables:
    - name: relative_humidity
    where:
    - variable:
        name: MetaData/latitude  # = -2.5, -1.25, 0, 1.25, 2.5
      maxvalue: 0
    action:
      name: unset
      flag: FlagA
  compareVariables:
  - test:
      name: DiagnosticFlags/FlagA/air_temperature
    reference:
      name: TestReference/bool_variable_11000  # = 1, 1, 0, 0, 0
  - test:
      name: DiagnosticFlags/FlagA/relative_humidity
    reference:
      name: TestReference/bool_variable_00000  # = 0, 0, 0, 0, 0

# Try to unset a non-existing diagnostic flag
- obs space:
    name: Test data for 'unset'
    obsdatain:
      obsfile: Data/ufo/testinput_tier_1/variable_assignment_testdata.nc
    simulated variables: [air_temperature, relative_humidity]
  obs filters:
  - filter: Perform Action
    action:
      name: unset
      flag: NonexistingFlag
  expectExceptionWithMessage: Diagnostic flag 'NonexistingFlag' does not exist yet
